---
title: "DM-Project-Marechal-Volaris"
format: html
editor: visual
---

# Loading the datasets

```{r}
here::i_am("DM-Project-Marechal-Volaris.Rproj")
library(here)
library(vroom)
counties <- vroom("county_complete.csv")
med_coverage <- vroom("dataset3.csv")
covid <- vroom("coronavirus-covid-19-pandemic-usa-counties.csv")
```
# Sources Presentation

The dataset county comes from website OpenIntro.This platform is dedicated to promote the learning of statistics and data science providing datasets about socioecomics. The dataset med coverage was downloaded from the website HRSA data which is an official platform provided by the Health Resources and Services Administration (HRSA), a U.S. government agency. It offers access to various public health datasets and tools related to healthcare services and resources in the United States. Finally the covid file comes from the website OpenDataSoft  which hosts open datasets on various topics, including public health, it is comparbale to openintro. It is a nongouvernemental website unlike HRSA.

# Dataset Presentation.

## The following explanations will concern the content of the three datasets studied in this project

## Data set 1 : "counties"

### Basic informations :

```{r}
# Number of rows and columns
num_rows <- nrow(counties)
num_cols <- ncol(counties)

# Create a table with basic information
data_info <- data.frame(
  Metric = c("Number of Rows", "Number of Columns"),
  Value = c(num_rows, num_cols)
)

# Display the table
print(data_info)
```

### Key variables :

1. median_age_2017:
Median age of the population in 2017. It reflects the age structure of the population and can influence economic activity and service demand.

2. bachelors_2017:
Percentage of the population with a bachelor’s degree or higher in 2017. This indicates the educational attainment level, which is closely linked to economic opportunities and income levels.

3. hs_grad_2017:
Percentage of the population with a high school diploma or equivalent in 2017. It measures basic educational attainment, a critical factor for workforce readiness.

4. some_college_2017: 
Percentage of the population with some college education but no degree in 2017. This reflects the segment of the population with post-secondary education but without completing a formal degree.

5. poverty_rate_2017: 
Percentage of the population living below the poverty line in 2017. It is a key measure of economic hardship and income disparity within the county.

6. unemployment_rate_2017: 
Unemployment rate in 2017. This is a vital indicator of the local labor market’s health and economic stability.

7. median_household_income_2017:
Median household income in 2017. It provides a measure of the typical income of households in the region, indicating economic well-being.

8. female_2017: 
Percentage of the population identifying as female in 2017. Understanding gender distribution can inform economic and social policy decisions.

9. veterans_2017:
Number of veterans living in the county in 2017. This highlights the demographic presence of individuals with military service and their potential economic and social needs.

10. foreign_born_2017:
 Percentage of the population born outside the United States in 2017. This variable is critical for understanding immigration patterns and their economic and cultural contributions.

## Data set 2 : "med_coverage"

### Basic informations :

```{r}
# Number of rows and columns
num_observations2 <- nrow(med_coverage)
num_variables2 <- ncol(med_coverage)

# Create a table with basic information
data_info2 <- data.frame(
  Metric = c("Number of Columns (Variables)", "Number of Rows (Observations)"),
  Value = c(num_variables2, num_observations2)
)

# Display the table
print(data_info2)
```

### Key variables :

1. Percent of Population with Incomes at or Below 100 Percent of the U.S. 
Federal Poverty Level Index of Medical Underservice Score: Index related to the percentage of the population below the poverty threshold, used to assess medical needs in the region.

2. Percentage of Population Age 65 and Over IMU Score: 
Score based on the percentage of the population aged 65 and over, reflecting the level of age-related vulnerability.

3. Infant Mortality Rate IMU Score: 
Score associated with the infant mortality rate, used to evaluateh medical needs in underserved areas.

4. Percent of Population with Incomes at or Below 100 Percent of the U.S. Federal Poverty Level: 
Percentage of the population with income equal to or below 100% of the federal poverty level, reflecting poverty levels in the area studied.

5. Infant Mortality Rate:
Infant mortality rate (deaths per 1,000 live births), a key indicator of overall health and available care in the region.

6. Providers per 1000 Population: 
Number of healthcare providers available per 1,000 residents, measuring access to medical care for the population.

7. Percentage of Population Age 65 and Over:
Percentage of the population aged 65 and older. This figure helps evaluate the proportion of elderly people in the region, often associated with increased healthcare needs.

8. Index of Medical Underservice Score: 
Score indicating the level of medical underservice. The higher the score, the more underserved the area is considered.

9. Primary State Name:
Name of the state where the underserved area is located. This helps contextualize designations geographically.

10. Common County Name:
Name of the county associated with the designated area. This detail is useful for localized or specific analyses.

11. MUA/P ID: 
Unique identifier assigned to each area or professional designated as underserved. It helps differentiate entities in the database.

12. MUA/P Area Code: 
Geographic code representing the underserved area. It is used to link data to specific zones.

13. MUA/P Service Area Name
Name assigned to the medically underserved area or service. This provides clear and geographically localized identification.

14. Designation Type Code: 
Indicates the type of designation, such as a medically underserved area. This facilitates classification of designation types.

## Data set 3 : "covid"

### Basic informations :

```{r}
# Number of rows and columns
num_observations3 <- nrow(covid)
num_variables3 <- ncol(covid)

# Create a table with basic information
data_info3 <- data.frame(
  Metric = c("Number of Columns (Variables)", "Number of Rows (Observations)"),
  Value = c(num_variables3, num_observations3)
)

# Display the table
print(data_info3)
```

### Key variables :

1. Total Death:
Total number of deaths recorded in a county due to COVID-19. This is a key indicator of the pandemic’s severity in the region.

2. Total Confirmed: 
Total number of confirmed COVID-19 cases in the region. This variable shows the extent of the outbreak in the area.

3. Admin 2 FIPS Code:
Federal Information Processing Standards (FIPS) code, a numeric identifier for counties. It helps in mapping and analyzing data geographically.

# Cleaning the datasets

## Loading the needed libraries

```{r}
library(dplyr)
library(tidyr)
```

## Dataset 1: "counties"

"counties" offers us an extensive data set regarding various socio-economic variables. Its length, nonetheless, brings us to make choices and keep only the most important ones for our project. For example, we can observe that most variables are observed at multiple times. Although an interesting feature, our study does not need to take into account trends and, in order to obtain a clearer set of data, we can only keep the most recent observations, taken in 2019.

```{r}
clean_counties <- counties |>
  select(fips, state, name, contains("2019"))
```

```{r}
# Number of rows and columns
num_rows11 <- nrow(clean_counties)
num_cols11 <- ncol(clean_counties)

# Create a table with basic information
data_info11 <- data.frame(
  Metric = c("Number of Rows", "Number of Columns"),
  Value = c(num_rows11, num_cols11)
)

# Display the table
print(data_info11)
```

Cleaning counties data set removed 139 variables

## Dataset 2: "med_coverage"

"med_coverage" is our second data set. It need to be viewed as a complement to "counties", to the extent that it has a much more complete approach regarding healthcare-related data. However, it is not solely on the county-level but is also based on census tracks, a smaller administrative level than counties. This particularity impacts the number of observations, close to 20,000, whereas our other data sets have roughly 3,000 observations each. Furthermore, the data set only takes into account Medically Underserved Areas within a county, biasing the comparative study of "med_coverage" and the other data sets. We can get past this issue thanks to the column `Medically Underserved Area/Population (MUA/P) Component Geographic Type Description`. Its value `Single County` implies that the whole county is a MUA. Filtering them would give us a county-level study of medical coverage.

```{r}
preclean_med_coverage <- med_coverage |>
  filter(`Medically Underserved Area/Population (MUA/P) Component Geographic Type Description`=="Single County")
```

The new dataset has fewer observations than the two others, since it only regards medically underserved counties. We can now drop useless and redundant variables and drop observations for counties who are no longer considered as medically underserved.

```{r}
clean_med_coverage <- preclean_med_coverage |>
  filter(`MUA/P Status Description`=="Designated") |>
  select(-`MUA/P Update Date`,
         -`Designation Type Code`,
         -`Designation Type`,
         -`MUA/P Status Code`,
         -`MUA/P Status Description`,
         -`Medically Underserved Area/Population (MUA/P) Withdrawal Date`,
         -`Medically Underserved Area/Population (MUA/P) Withdrawal Date in Text Format`,
         -`Break in Designation`,
         -`MUA/P Population Type Code`,
         -`Medically Underserved Area/Population (MUA/P) Metropolitan Indicator`,
         -`Medically Underserved Area/Population (MUA/P) Metropolitan Description`,
         -`Medically Underserved Area/Population (MUA/P) Component Geographic Type Code`,
         -`County or County Equivalent Federal Information Processing Standard Code`,
         -`County Subdivision Name`,
         -`County Subdivision FIPS Code`,
         -`Census Tract`,
         -`Data Warehouse Record Create Date`,
         -`Data Warehouse Record Create Date Text`,
         -`Common State Abbreviation`,
         -`Common State FIPS Code`,
         -contains("Primary"),
         -`County Description`,
         -`State FIPS Code`,
         -`MUA/P ID`,
         -`MUA/P Area Code`,
         -`MUA/P Update Date String`,
         -`Medically Underserved Area/Population (MUA/P) Component Geographic Type Description`,
         -`Population Type`,
         -`HHS Region Code`,
         -`State Abbreviation`,
         -contains("Common"),
         -`MUA/P Service Area Name`,
         -`Designation Date`,
         -`Medically Underserved Area/Population (MUA/P) Component Geographic Name`,
         -`County Equivalent Name`,
         -`Rural Status Code`,
         )
```

```{r}
# Number of rows and columns
num_rows21 <- nrow(clean_med_coverage )
num_cols21 <- ncol(clean_med_coverage )

# Create a table with basic information
data_info21 <- data.frame(
  Metric = c("Number of Rows", "Number of Columns"),
  Value = c(num_rows21, num_cols21)
)

# Display the table
print(data_info21)
```

Cleaning counties data set removed 44 variables and 17478 values

## Dataset 3: "covid"

"covid" is already quite straightforward. We have selected directly on the website the latest values, observed on March 9th, 2023. Then, we can drop the `Date` variable, made irrelevant by our selection, along with the `location` one, who is not exploitable for our project.

```{r}
clean_covid <- covid |>
  select(-Date, -location)
```

```{r}
# Number of rows and columns
num_rows31 <- nrow(clean_covid )
num_cols31 <- ncol(clean_covid )

# Create a table with basic information
data_info31 <- data.frame(
  Metric = c("Number of Rows", "Number of Columns"),
  Value = c(num_rows31, num_cols31)
)

# Display the table
print(data_info31)
```

Cleaning counties data set removed 2 variables 


# Joining the datasets

Now that we have cleaned all three of our datasets, we can merge them into a single one, named `clean_merged`. Since our observations are based on United States counties, we may want to join them thanks to the name variables. However, this approach would make us encounter various problems:

-   `clean_med_coverage` and `clean_counties` include the administrative subdivision type in their observation (for example "Adams County"), while `clean_covid` does not ("Adams").
-   Numerous counties have the same name:

```{r}
clean_counties |>
  filter(name=="Adams County") |>
  summarize(number=n())
```

Thus, it would be a better fit to use the Federal Information Procession Standard Code, a five-digit number unique to each county. First, let's rename the variables in order to allow us to join.

```{r}
clean_covid <- clean_covid |>
  rename(fips=`Admin 2 FIPS Code`)
clean_med_coverage <- clean_med_coverage |>
  rename(fips=`State and County Federal Information Processing Standard Code`)
```

`fips` is a character in `clean_med_coverage`, whereas it is a numeric variable in the two others.

```{r}
clean_med_coverage <- clean_med_coverage |>
  mutate(fips = as.double(fips))
```

```{r}
clean_merged <-
  full_join(clean_counties, clean_covid, by="fips")
clean_merged <-
  full_join(clean_merged, clean_med_coverage, by="fips")
```

Now that we have a joined dataset, we can drop redundant variables.

```{r}
clean_merged <- clean_merged |>
  select(-`Province/State`,
         -`Admin 2 Level (City/County/Borough/Region)`,
         -`State Name`,
         -`Complete County Name`,
         -`Percentage of Population Age 65 and Over`,
         -`Designation Population in a Medically Underserved Area/Population (MUA/P)`,
         `Medically Underserved Area/Population (MUA/P) Total Resident Civilian Population`,
         )
```
```{r}
print(clean_merged)
```

```{r}
# Number of rows and columns
num_rows12 <- nrow(clean_merged )
num_cols12 <- ncol(clean_merged )

# Create a table with basic information
data_info12 <- data.frame(
  Metric = c("Number of Rows", "Number of Columns"),
  Value = c(num_rows12, num_cols12)
)

# Display the table
print(data_info12)
```

Cleaning counties data set removed 2 variables 
> > > > > > > 9e5743d4b17787f36c3c05ef4511b923b9c423d2
